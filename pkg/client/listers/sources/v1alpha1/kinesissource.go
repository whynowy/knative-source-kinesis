/*
Copyright 2019

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/whynowy/knative-source-kinesis/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KinesisSourceLister helps list KinesisSources.
type KinesisSourceLister interface {
	// List lists all KinesisSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisSource, err error)
	// KinesisSources returns an object that can list and get KinesisSources.
	KinesisSources(namespace string) KinesisSourceNamespaceLister
	KinesisSourceListerExpansion
}

// kinesisSourceLister implements the KinesisSourceLister interface.
type kinesisSourceLister struct {
	indexer cache.Indexer
}

// NewKinesisSourceLister returns a new KinesisSourceLister.
func NewKinesisSourceLister(indexer cache.Indexer) KinesisSourceLister {
	return &kinesisSourceLister{indexer: indexer}
}

// List lists all KinesisSources in the indexer.
func (s *kinesisSourceLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisSource))
	})
	return ret, err
}

// KinesisSources returns an object that can list and get KinesisSources.
func (s *kinesisSourceLister) KinesisSources(namespace string) KinesisSourceNamespaceLister {
	return kinesisSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KinesisSourceNamespaceLister helps list and get KinesisSources.
type KinesisSourceNamespaceLister interface {
	// List lists all KinesisSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisSource, err error)
	// Get retrieves the KinesisSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KinesisSource, error)
	KinesisSourceNamespaceListerExpansion
}

// kinesisSourceNamespaceLister implements the KinesisSourceNamespaceLister
// interface.
type kinesisSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KinesisSources in the indexer for a given namespace.
func (s kinesisSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisSource))
	})
	return ret, err
}

// Get retrieves the KinesisSource from the indexer for a given namespace and name.
func (s kinesisSourceNamespaceLister) Get(name string) (*v1alpha1.KinesisSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kinesissource"), name)
	}
	return obj.(*v1alpha1.KinesisSource), nil
}
